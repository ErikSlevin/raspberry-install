#-----------------------------------------------------------
# /etc/ssh/sshd_config
#-----------------------------------------------------------

Include /etc/ssh/sshd_config.d/*.conf

# Legt die SSH Version fest
Protocol 2

# Legt die Nummer des Ports fest, an dem sshd auf Anfragen warten soll - Standard 22.
Port 62253

# SSH-Login Banner vor dem Login
Banner /etc/issue.net

# Legt die von sshd zu verwendende Adressfamilie fest.
# Optionen: any, inet (nur IPv4), inet6 (nur IPv6)
AddressFamily inet

# Legt eine Datei fest, die den von SSH verwandten privaten Rechnerschlüssel enthält
HostKey /etc/ssh/ssh_host_ed25519_key

# Legt den vom Rechner angebotenen Rechnerschlüssel-Signaturalgorithmus fest
HostKeyAlgorithms ssh-ed25519

# StrictModes prueft die Rechte wichtiger Dateien, die vom sshd benutzt werden. 
# Bei unsicherer Rechtevergabe wird der Server nicht gestartet. 
StrictModes yes

# Gibt die Ausführlichkeitsstufe an, die beim Protokollieren von Nachrichten von sshd verwandt wird.
SyslogFacility AUTH
LogLevel VERBOSE

# SSH- Willkommensnachricht deaktivieren
PrintMotd no
PrintLastLog yes

# Der Server beendet die Verbindung nach dieser Zeit, falls sich der Benutzer nicht erfolgreich angemeldet hat
LoginGraceTime 1m

# Legt fest, dass der Super-User keine Passwort-Authentifizierung, sondern nur Public-Key Authentifizierung nutzen darf 
PermitRootLogin no

# Legt die maximale Anzahl von Authentifizierungsversuchen fest, die pro Verbindung erlaubt sind. 
# Sobald die Anzahl der Fehlschläge die Hälfte dieses Wertes erreicht hat, werden zusätzliche Fehlschläge protokolliert
MaxAuthTries 3

# Legt die maximale Anzahl an offenen Shell-, Anmelde- oder Subsystem- (z.B. Sftp-)Sitzungen fest, 
# die pro Netzwerkverbindung erlaubt sind
MaxSessions 2

# Legt fest, dass Public-Key-Authentication verwendet werden darf. 
PubkeyAuthentication yes 

# Legt fest, ob Passwortauthentifizierung erlaubt ist
PasswordAuthentication no

# Legt fest, dass keine leeren Passwoerter verwendet werden duerfen. 
PermitEmptyPasswords no 

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
ChallengeResponseAuthentication yes

# Ein unprivilegierter sshd-Prozess wird gestartet, der nur den Netzwerkverkehr verwaltet. 
# Nach erfolgreicher Authentifizierung startet dann ein Prozess mit den Rechten des 
UsePrivilegeSeparation yes

# Nach 10 Minuten der Inaktivität schickt der Server dem Client eine Nachricht, die bestätigt werden muss.
# Auf diese Art koennen unterbrochene Verbindungen festgestellt werden. 
ClientAliveInterval 300

# Max. 3 der durch ClientAliveInterval gesendeten Nachrichten duerfen unbestaetigt bleiben,
# bevor die Verbindung abgebaut wird. 
ClientAliveCountMax 2

# Bestimmt die Option ob TCP-Keep-Alives zur Erkennung unterbrochener Verbindungen genutzt werden. Damit wird die Erkennung
# unterbrochener Verbindungen sensibilisiert, so dass eine Verbindung auch bei kleineren Stoerungen abgebaut wird. 
TCPKeepAlive no 

# Vor dem Senden werden die Daten nicht komprimiert. 
Compression no

# Bei eingehenden SSH-Verbindungen wird die Quell-IP-Adresse in einen DNS-Namen umgewandelt und umgekehrt. 
# Sind die Client-IP-Adresse und das Ergebnis der Namensaufloesung gleich, so wird die Verbindung zugelassen. 
UseDNS no

# Benutzerkontrolle: Nur Mitglieder der Gruppe ssh-users duerfen sich per ssh einloggen. 
# Alle anderen Gruppen wird der Login verwehrt.
AllowGroups ssh-users

# Legt fest, dass weder die Datei $HOME/.ssh/environment, noch die ENVIRONMENT-Direktiven
# aus der Datei $HOME/.ssh/authorized_keys ausgewertet werden. 
PermitUserEnvironment no

# Benennt die Datei aller autorisierten Schluessel wie hier relativ zum Home-Verzeichnis des Benutzers. 
AuthorizedKeysFile .ssh/authorized_keys

# Startet Secure-FTP (SFTP) als Subsystem des SSH-Servers. 
Subsystem sftp /usr/lib/ssh/sftp-server

# 2-FA Authentifizierung per Public-Key und Einmalpasswort akzeptieren
UsePAM yes
AuthenticationMethods publickey,keyboard-interactive

# TCP Weiterleitungen untersagen
AllowTcpForwarding no

# Ist diese Funktionalität aktiv, kann man sich mit dem im SSH-Agenten gespeicherten privaten SSH-Schlüssel zu einem entfernten 
# Rechner verbinden und von dort aus unter Nutzung des gleichen Schlüssels Verbindungen zu weiteren Rechnern aufbauen.
AllowAgentForwarding no